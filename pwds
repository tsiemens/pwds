#!/usr/bin/env python
import argparse
import sys
import os
import json
import re
import base64
from getpass import getpass
try:
    import gnupg
except ImportError:
    print '''gnupg not installed. run:
$ sudo pip install gnupg
pip can usually be found in your package manager under python-pip'''
    quit()

DEFAULT_FILES= [ './pwds.safe', os.path.join( os.environ[ 'HOME' ], 'pwds.safe' ) ]

class PasswordEntry( object ):
    def __init__( self, username=None, email=None, name=None, note=None, password=None ):
        self.username=username
        self.email=email
        self.name=name
        self.note=note
        self.password = password

    def copy( self ):
        return PasswordEntry( username=self.username, email=self.email, name=self.name,
                              note=self.note, password=self.password )

    def __str__( self ):
        return "%s: email:%s, Username:%s, Pass:%s, Note:%s" % \
                ( self.name, self.username, self.email, self.password, self.note )

    def matches( self, pattern, properties=None ):
        if properties == None or len( properties ) == 0:
            properties = [ 'username', 'email', 'name', 'note' ]

        for p in properties:
            if hasattr( self, p ):
                attr = getattr( self, p )
                attr = attr if attr is not None else ''
                if re.search( pattern, attr ):
                    return True
            else:
                raise AttributeError( 'Password entry has no attribute %s' % p )
        return False

def decodeEntry( obj ):
    return PasswordEntry( username=obj['username'], email=obj['email'],
                          name=obj['name'], note=obj['note'], password=obj['password'] )

class EntryEncoder( json.JSONEncoder ):
    def default( self, obj ):
        return { 'username': obj.username,
                 'email': obj.email,
                 'name': obj.name,
                 'note': obj.note,
                 'password': obj.password }

def decrypt( password, safe ):
    gpg = gnupg.GPG( options=[ 'armor', 'batch' ] )
    with open( safe, 'rb' ) as safef:
        result = gpg.decrypt_file( safef, passphrase=password, always_trust=True )
        return result.data if result.ok else None

def encrypt( password, text, safe ):
    gpg = gnupg.GPG( options=[ 'batch' ] )
    gpg.encrypt( text, encrypt=False, armor=True, symmetric=True, passphrase=password, output=safe )

def promptForPassword( prompt="Enter password: " ):
        return getpass( prompt=prompt )

class AuthenticationError( Exception ):
    def __init__( self, value ):
        self.value = value

    def __str__( self ):
        return self.value

class Safe( object ):
    def __init__( self, filename ):
        self.filename = filename
        if os.path.isfile( filename ):
            self.password = promptForPassword( prompt="Enter password for %s: " % filename )
            self.rawData = decrypt( self.password, filename )
            if self.rawData is None:
                raise AuthenticationError( 'Password incorrect for %s' % filename )
        else:
            while True:
                password = promptForPassword( prompt="Enter new password for %s: " % filename )
                confPass = promptForPassword( prompt="Confirm password: " )
                if password == confPass:
                    self.password = password
                    self.rawData = ''
                    return
                else:
                    print 'Passwords did not match!'

    def loadPasswordEntries( self ):
        if self.rawData is None or self.rawData == '':
            self.writePasswords( [] )
            return []
        else:
            try:
                passes = json.loads( self.rawData )
                return [ decodeEntry( o ) for o in passes ]
            except IOError as e:
                return []
            except ValueError:
                return None

    def writePasswords( self, passwordEntries ):
        jsonStr = json.dumps( passwordEntries, cls=EntryEncoder )
        encrypt( self.password, jsonStr, self.filename )
        self.rawData = jsonStr

class PasswordManager( object ):

    def __init__( self, passwords ):
        self.passwords = passwords

    def add( self, username=None, email=None, name=None, note=None, password=None ):
        """ Adds a new password. Returns True if successful """
        if not password:
            password = promptForPassword( prompt='Enter password for %s: ' % name )
        newpass = PasswordEntry( username=username, email=email, name=name,
                                 note=note, password=password )
        self.passwords.append( newpass )
        return True

    def getIndexedPasswords( self, index=None, pattern=None, searchProps=None, sortProp=None ):
        if index is not None:
            if index >= 0 and index < len( self.passwords ):
                return [ ( index, self.passwords[ index ] ) ]
            else:
                print "No password with index %d" % index
        else:
            passes = [ ( i, self.passwords[ i ] ) for i in range( len( self.passwords ) ) \
                       if pattern is None or self.passwords[ i ].matches( pattern,
                                                                          properties=searchProps ) ]
            if sortProp is not None and len( passes ) > 0:
                if hasattr( passes[ 0 ][ 1 ], sortProp ):
                    passes.sort( key=lambda p: getattr( p[ 1 ], sortProp ) )
                else:
                    raise AttributeError( 'Password entry has no attribute %s' % p )
            return passes

    def update( self, indexedEntryTuples, username=None, email=None, name=None,
            note=None, password=None, shouldPromptForPassword=False ):
        """ Updates the passwords. Returns True if successful """
        print "Updating %d entries..." % len( indexedEntryTuples )
        print "Before:"
        self.prettyPrintEntries( indexedEntryTuples )

        if shouldPromptForPassword and password is None:
            password = promptForPassword( prompt="Enter new password: " )

        copy = []
        for i, e in indexedEntryTuples:
            ecopy = e.copy()
            ecopy.name = ecopy.name if name == None else name
            ecopy.username = ecopy.username if username == None else username
            ecopy.email = ecopy.email if email == None else email
            ecopy.note = ecopy.note if note == None else note
            ecopy.password = ecopy.password if password == None else password
            copy.append( ( i, ecopy ) )

        print "\nAfter:"
        self.prettyPrintEntries( copy )

        if promptYesNo( "Are these changes ok?" ):
            for orig, changed in zip( indexedEntryTuples, copy ):
                self.passwords[ orig[ 0 ] ] = changed[ 1 ]
            return True
        else:
            return False

    def delete( self, indexesToDelete ):
        toDelete = []
        for i in range( len( self.passwords ) ):
            if i in indexesToDelete:
                toDelete.append( ( i, self.passwords[ i ] ) )

        self.prettyPrintEntries( toDelete )

        if promptYesNo( "Delete these entries?" ):
            for i in range( len( self.passwords ), -1, -1 ):
                if i in indexesToDelete:
                    del self.passwords[ i ]
            return True
        else:
            return False

    def prettyPrintEntries( self, indexEntryTuples ):
        fmt = '%-3s %-15s %-15s %-25s %-15s %-15s'
        header = fmt % ( '', 'name', 'username', 'email', 'password', 'note' )
        print header
        print '-' * len( header )
        for i, e in indexEntryTuples:
            print fmt % ( str( i ), e.name, e.username, e.email, e.password,
                          e.note.replace( '\n', '\n' + ' ' * ( len( header ) - 15 ) ) \
                                  if e.note is not None else None )

def promptYesNo( question ):
    while True:
        reply = str( raw_input( question + ' [y/n]: ' ) ).lower().strip()
        if reply[ 0 ] == 'y':
            return True
        if reply[ 0 ] == 'n':
            return False

def getDefaultFilename():
    for f in DEFAULT_FILES:
        if os.path.isfile( f ):
            return f

    return DEFAULT_FILES[ 0 ]

def genKey( length ):
    """ Creates a random password """
    return base64.b64encode( os.urandom( 100 ) )[ :length ]

def handleGenPass( gen_pass_val ):
    if gen_pass_val == -1:
        return None
    elif gen_pass_val > 0 and gen_pass_val <= 100:
        return genKey( gen_pass_val )
    else:
        raise ValueError( 'gen-pass value must be > 0 and <= 100' )

def addEditParserArgs( parser ):
    parser.add_argument( '--username', '-u', type=str,
                         help='Provide a username' )
    parser.add_argument( '--email', '-e', type=str,
                         help='Provide an account email' )
    parser.add_argument( '--name', '-n', type=str,
                         help='Provide an service/platform name' )
    parser.add_argument( '--note', type=str,
                         help='Provide a note such as Q/As' )
    parser.add_argument( '--gen-pass', '-g', metavar='LENGTH', type=int, nargs='?', default=-1,
                            help='Generate a password when adding or updating. '
                                 'Default length is 50. Max length is 100' )

def addSelectParserArgs( parser ):
    parser.add_argument( '--index', '-i', type=int,
                         help='Show the entry at this index' )
    parser.add_argument( '--regex', '-r', metavar=('PATTERN', 'PROPERTIES'), type=str, nargs='+',
                         help='A regular expression to search for a password to show or edit.'
                              ' Optional property names can also be provided to search.' )


def cmd_show( args, passMgr, safe ):
    if args.raw:
        cmd_dump( args, passMgr, safe )
    else:
        passes = passMgr.getIndexedPasswords( index=args.index, sortProp=args.sort,
                                       pattern=args.regex_pattern,
                                       searchProps=args.regex_props )
        passMgr.prettyPrintEntries( passes )
    return False, None

def cmd_add( args, passMgr, safe ):
    password = handleGenPass( args.gen_pass )
    success = passMgr.add( name=args.name,
                           username=args.username,
                           email=args.email,
                           note=args.note,
                           password=password )
    return success, 'Added password for %s' % args.name

def cmd_update( args, passMgr, safe ):
    if args.index is None and args.regex_pattern is None:
        print "Must provide --index or --regex for update"
        return False, None
    else:
        passes = passMgr.getIndexedPasswords( index=args.index,
                                       pattern=args.regex_pattern,
                                       searchProps=args.regex_props )

        password = handleGenPass( args.gen_pass )

        success = passMgr.update( passes, name=args.name,
                                  username=args.username,
                                  email=args.email,
                                  note=args.note,
                                  password=password,
                                  shouldPromptForPassword=args.password )
        return success, None

def cmd_delete( args, passMgr, safe ):
    if args.index is None and args.regex_pattern is None:
        print "Must provide --index or --regex for delete"
        return False, None
    else:
        passes = passMgr.getIndexedPasswords( index=args.index,
                                       pattern=args.regex_pattern,
                                       searchProps=args.regex_props )

        success = passMgr.delete( [ i for i, e in passes ] )
        return success, None

def cmd_dump( args, passMgr, safe ):
    try:
        print json.dumps( passMgr.passwords, cls=EntryEncoder, indent=4, separators=( ',', ': ' ) )
    except ValueError:
        print safe.rawData
    return False, None

def main():
    argparser = argparse.ArgumentParser( prog='pwds',
            description='Manage passwords in a GPG file.' )

    argparser.add_argument( '--file', '-f', metavar='FILENAME', default=getDefaultFilename(),
                            help='A file to use for storing passwords. Defaults to '
                                 './pwds.safe or ~/.pwds.safe, if they exist, or creates '
                                 './pwds.safe if neither is found.' )

    cmdparser = argparser.add_subparsers( title='command' )

    parser_show = cmdparser.add_parser( 'show' )
    addSelectParserArgs( parser_show )
    parser_show.add_argument( '--sort', '-s', type=str, metavar='PROPERTY',
                              help='Sort show output by property name' )
    parser_show.add_argument( '--raw', action='store_true',
                              help='Equivalent to dump command' )
    parser_show.set_defaults( func=cmd_show )

    parser_add = cmdparser.add_parser( 'add' )
    addEditParserArgs( parser_add )
    parser_add.set_defaults( func=cmd_add )

    parser_update = cmdparser.add_parser( 'update' )
    addEditParserArgs( parser_update )
    parser_update.add_argument( '--password', '-p', action='store_true',
                                help='Change the password' )
    addSelectParserArgs( parser_update )
    parser_update.set_defaults( func=cmd_update )

    parser_delete = cmdparser.add_parser( 'delete' )
    addSelectParserArgs( parser_delete )
    parser_delete.set_defaults( func=cmd_delete )

    parser_dump = cmdparser.add_parser( 'dump' )
    parser_dump.set_defaults( func=cmd_dump )

    args = argparser.parse_args()

    if hasattr( args, 'gen_pass' ) and args.gen_pass is None:
        args.gen_pass = 50

    try:
        safe = Safe( args.file )
        passwords = safe.loadPasswordEntries()

        if passwords is None and args.command is not 'dump' and \
            args.command is not 'show' and not args.raw:
            print( 'The dafe data could not be parsed. '
                   'Use the dump command to recover the contents.' )
            return

        passManager = PasswordManager( passwords )

        if hasattr( args, 'regex' ):
            args.regex_pattern = args.regex[ 0 ] if args.regex is not None else None
            args.regex_props = args.regex[ 1: ] if args.regex is not None else None

        shouldWrite, writeMsg = args.func( args, passManager, safe )

        if shouldWrite:
            safe.writePasswords( passManager.passwords )
            if writeMsg:
                print writeMsg

    except AuthenticationError as e:
        print str( e )

if __name__ == '__main__':
    main()
